/*
  Blink
  Turns on an LED on for one second, then off for one second, repeatedly.

  Most Arduinos have an on-board LED you can control. On the Uno and
  Leonardo, it is attached to digital pin 13. If you're unsure what
  pin the on-board LED is connected to on your Arduino model, check
  the documentation at http://www.arduino.cc

  This example code is in the public domain.

  modified 8 May 2014
  by Scott Fitzgerald
 */
#include <Arduino.h>
#include <Arduino_FreeRTOS.h>

// // the setup function runs once when you press reset or power the board
// void setup() {
//   // initialize digital pin 13 as an output.
//   pinMode(31, OUTPUT);
//   Serial.begin(9600);
//   TCCR1A = 0;
// 	TCCR1B = 1 << WGM12 | 1 << CS12 ; //256 prescale 1 count = 16us
// 	TCCR1C = 0;
// 	TIMSK |= 1 << OCIE1A;
// 	OCR1A = 62500;	//1 ms over flow
//
// }
 // int c = 0;
// // ISR(TIMER0_OVF_vect){
// //   Serial.println(c++);
// // }
// ISR(TIMER1_COMPA_vect){
//   Serial.println(c++);
// }
//
// // the loop function runs over and over again forever
// void loop() {
//   digitalWrite(31, HIGH);   // turn the LED on (HIGH is the voltage level)
//   delay(1000);              // wait for a second
//   digitalWrite(31, LOW);    // turn the LED off by making the voltage LOW
//   delay(1000);              // wait for a second
//   Serial.println(micros());
//
//   //Serial.println("Hello world!!");
// }


void TaskBlink( void *pvParameters );
void TaskAnalogRead( void *pvParameters );

// the setup function runs once when you press reset or power the board
void setup() {

  // Now set up two tasks to run independently.
  xTaskCreate(
    TaskBlink
    ,  (const portCHAR *) "Blink"   // A name just for humans
    ,  128  // This stack size can be checked & adjusted by reading the Stack Highwater
    ,  NULL
    ,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
    ,  NULL );

  xTaskCreate(
    TaskAnalogRead
    ,  (const portCHAR *) "AnalogRead"
    ,  128  // Stack size
    ,  NULL
    ,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
    ,  NULL );

  // Now the task scheduler, which takes over control of scheduling individual tasks, is automatically started.
}

void loop()
{
  // // Empty. Things are done in Tasks.
  //   digitalWrite(31, HIGH);   // turn the LED on (HIGH is the voltage level)
  //   delay(1000);              // wait for a second
  //   digitalWrite(31, LOW);    // turn the LED off by making the voltage LOW
  //   delay(1000);              // wait for a second
  //   Serial.println(micros());
}

/*--------------------------------------------------*/
/*---------------------- Tasks ---------------------*/
/*--------------------------------------------------*/

void TaskBlink(void *pvParameters)  // This is a task.
{
  (void) pvParameters;

  // initialize digital pin 13 as an output.
  pinMode(31, OUTPUT);

  for (;;) // A Task shall never return or exit.
  {
    digitalWrite(31, HIGH);   // turn the LED on (HIGH is the voltage level)
    vTaskDelay( 200 / portTICK_PERIOD_MS ); // wait for one second
    digitalWrite(31, LOW);    // turn the LED off by making the voltage LOW
    vTaskDelay( 200 / portTICK_PERIOD_MS ); // wait for one second
  }
}

void TaskAnalogRead(void *pvParameters)  // This is a task.
{
  (void) pvParameters;

  // initialize serial communication at 9600 bits per second:
  Serial.begin(9600);
  int c = 0;

  for (;;)
  {
    // read the input on analog pin 0:
    int sensorValue = analogRead(A0);
    // print out the value you read:
    Serial.println(c++);
    //Serial.println(sensorValue);
    vTaskDelay(1000);  // one tick delay (15ms) in between reads for stability
  }
}
